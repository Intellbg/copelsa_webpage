---
export interface Props {
  images: string[];
  carrouselID?: string;
}
const { images, carrouselID = "0" } = Astro.props;
---

<div class="carousel" id={carrouselID}>
  <div class="slides">
    {
      images.map((data) => (
        <div class="slide">
          <img src={data} alt={data} />
        </div>
      ))
    }
  </div>
  <button class="prev-button">&lt;</button>
  <button class="next-button">&gt;</button>
</div>

<style>
  .carousel {
    position: relative;
    width: 400px;
    margin: 0 auto;
    overflow: hidden;
  }

  .slides {
    display: flex;
    transition: transform 0.5s ease-in-out;
    width: fit-content;
  }

  .slide {
    flex: 0 0 100%;
    max-height: 350px;
    transition: opacity 0.5s ease-in-out;
  }
  .slide img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .prev-button,
  .next-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 50px;
    height: 50px;
    background-color: transparent;
    border: none;
    font-size: 20px;
    color: white;
    cursor: pointer;
  }

  .prev-button {
    left: 10px;
  }

  .next-button {
    right: 10px;
  }
</style>

<script define:vars={{ carrouselID }}>
  document.addEventListener("DOMContentLoaded", function () {
    const carousel = document.getElementById(carrouselID);
    const slides = carousel.querySelector(".slides");
    const slideWidth = carousel.offsetWidth;
    let currentIndex = 0;
    let intervalId;

    function slideTo(index) {
      slides.style.transform = `translateX(-${index * slideWidth}px)`;
    }

    function prevSlide() {
      if (currentIndex > 0) {
        currentIndex--;
      } else {
        currentIndex = slides.childElementCount - 1;
      }
      slideTo(currentIndex);
    }

    function nextSlide() {
      if (currentIndex < slides.childElementCount - 1) {
        currentIndex++;
      } else {
        currentIndex = 0;
      }
      slideTo(currentIndex);
    }

    function startAutoSlide() {
      intervalId = setInterval(() => {
        if (currentIndex === slides.childElementCount - 1) {
          currentIndex = 0;
        } else {
          currentIndex++;
        }
        slideTo(currentIndex);
      }, 3000); // Adjust the duration (in milliseconds) between slides as desired
    }

    function stopAutoSlide() {
      clearInterval(intervalId);
    }

    const prevButton = carousel.querySelector(".prev-button");
    prevButton.addEventListener("click", function () {
      stopAutoSlide();
      prevSlide();
      startAutoSlide();
    });

    const nextButton = carousel.querySelector(".next-button");
    nextButton.addEventListener("click", function () {
      stopAutoSlide();
      nextSlide();
      startAutoSlide();
    });

    startAutoSlide();
  });
</script>
